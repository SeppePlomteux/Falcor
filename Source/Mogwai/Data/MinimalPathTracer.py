from falcor import *

def render_graph_DefaultRenderGraph():
    g = RenderGraph('DefaultRenderGraph')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('Utils.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('ResetPipelinePass.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('PartialErrorMeasurePass.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('PPGPass.dll')
    loadRenderPassLibrary('ReSTIRPass.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    MinimalPathTracer = createPass('MinimalPathTracer', {'mMaxBounces': 3, 'mComputeDirect': True})
    g.addPass(MinimalPathTracer, 'MinimalPathTracer')
    GBufferRT = createPass('GBufferRT', {'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'disableAlphaTest': False, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'texLOD': LODMode.UseMip0})
    g.addPass(GBufferRT, 'GBufferRT')
    g.addEdge('GBufferRT.posW', 'MinimalPathTracer.posW')
    g.addEdge('GBufferRT.normW', 'MinimalPathTracer.normalW')
    g.addEdge('GBufferRT.tangentW', 'MinimalPathTracer.tangentW')
    g.addEdge('GBufferRT.diffuseOpacity', 'MinimalPathTracer.mtlDiffOpacity')
    g.addEdge('GBufferRT.specRough', 'MinimalPathTracer.mtlSpecRough')
    g.addEdge('GBufferRT.emissive', 'MinimalPathTracer.mtlEmissive')
    g.addEdge('GBufferRT.matlExtra', 'MinimalPathTracer.mtlParams')
    g.addEdge('GBufferRT.faceNormalW', 'MinimalPathTracer.faceNormalW')
    g.addEdge('GBufferRT.viewW', 'MinimalPathTracer.viewW')
    g.markOutput('MinimalPathTracer.color')
    return g

DefaultRenderGraph = render_graph_DefaultRenderGraph()
try: m.addGraph(DefaultRenderGraph)
except NameError: None
