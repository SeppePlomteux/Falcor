from falcor import *

def render_graph_DefaultRenderGraph():
    g = RenderGraph('DefaultRenderGraph')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('ClampPass.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('DirectLightingRTPass.dll')
    loadRenderPassLibrary('PartialErrorMeasurePass.dll')
    loadRenderPassLibrary('DirectLightTracingPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('ReservoirDirectLightSamplingPass.dll')
    loadRenderPassLibrary('ExampleBlitPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('InfinityFilterPass.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracerTEST.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('ReservoirSpatialResamplingPass.dll')
    loadRenderPassLibrary('ReservoirTemporalResamplingPass.dll')
    loadRenderPassLibrary('ReservoirTracingPass.dll')
    loadRenderPassLibrary('ResetPipelinePass.dll')
    loadRenderPassLibrary('ReSTIRPass.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('UniformDirectLightSamplingPass.dll')
    loadRenderPassLibrary('Utils.dll')
    loadRenderPassLibrary('WireframePass.dll')
    ReSTIRPass = createPass('ReSTIRPass', {'mSharedParams': PathTracerParams(samplesPerPixel=1, lightSamplesPerVertex=1, maxNonSpecularBounces=3, maxBounces=3, useVBuffer=1, forceAlphaOne=1, useAlphaTest=1, clampSamples=0, useMIS=0, clampThreshold=10.0, specularRoughnessThreshold=0.25, useBRDFSampling=1, useNestedDielectrics=1, useNEE=1, misHeuristic=1, misPowerExponent=2.0, probabilityAbsorption=0.20000000298023224, useRussianRoulette=0, useFixedSeed=0, useLegacyBSDF=0, useLightsInVolumes=1, disableCaustics=0, rayFootprintMode=0, rayConeMode=2, rayFootprintUseRoughness=0), 'mSelectedSampleGenerator': 1, 'mSelectedEmissiveSampler': EmissiveLightSamplerType.Uniform, 'mUniformSamplerOptions': EmissiveUniformSamplerOptions(), 'mLightBVHSamplerOptions': LightBVHSamplerOptions(useBoundingCone=True, buildOptions=LightBVHBuilderOptions(splitHeuristicSelection=SplitHeuristic.BinnedSAOH, maxTriangleCountPerLeaf=10, binCount=16, volumeEpsilon=0.0010000000474974513, useLeafCreationCost=True, createLeavesASAP=True, useLightingCones=True, splitAlongLargest=False, useVolumeOverSA=False, allowRefitting=True, usePreintegration=True), useLightingCone=True, disableNodeFlux=False, useUniformTriangleSampling=True, solidAngleBoundMethod=SolidAngleBoundMethod.Sphere)})
    g.addPass(ReSTIRPass, 'ReSTIRPass')
    GBufferRT = createPass('GBufferRT', {'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'disableAlphaTest': False, 'forceCullMode': False, 'cull': CullMode.CullBack, 'texLOD': LODMode.UseMip0})
    g.addPass(GBufferRT, 'GBufferRT')
    g.addEdge('GBufferRT.posW', 'ReSTIRPass.position')
    g.addEdge('GBufferRT.normW', 'ReSTIRPass.shadingNormal')
    g.addEdge('GBufferRT.diffuseOpacity', 'ReSTIRPass.diffColorOp')
    g.addEdge('GBufferRT.specRough', 'ReSTIRPass.specRoughness')
    g.addEdge('GBufferRT.emissive', 'ReSTIRPass.emissiveColor')
    g.addEdge('GBufferRT.matlExtra', 'ReSTIRPass.extraMatParams')
    g.addEdge('GBufferRT.viewW', 'ReSTIRPass.viewVec')
    g.addEdge('GBufferRT.faceNormalW', 'ReSTIRPass.gometricNormal')
    g.addEdge('GBufferRT.faceNormalW', 'ReSTIRPass.normals')
    g.addEdge('GBufferRT.mvec', 'ReSTIRPass.motionVecs')
    g.markOutput('ReSTIRPass.color')
    return g

DefaultRenderGraph = render_graph_DefaultRenderGraph()
try: m.addGraph(DefaultRenderGraph)
except NameError: None
